import 'package:flutter/cupertino.dart';
import '../services/task_service.dart';

class TaskProvider with ChangeNotifier {
  // Task input fields
  TextEditingController taskTitle = TextEditingController();
  TextEditingController taskDescription = TextEditingController();
  TextEditingController taskStartDate = TextEditingController();
  TextEditingController taskEndDate = TextEditingController();

  // Task status toggle
  bool isTaskCompleted = false;

  final TaskService _taskService = TaskService();

  // Create a new task
  Future<void> createTask(BuildContext context) async {
    try {
      final newTask = Task(
        id: '', // ID will be generated by the server
        title: taskTitle.text,
        description: taskDescription.text,
        status: isTaskCompleted ? "completed" : "pending",
        startDate: DateTime.parse(taskStartDate.text),
        endDate: DateTime.parse(taskEndDate.text),
      );

      final response = await _taskService.createTask(newTask);

      // Handle successful task creation, e.g., update a task list or navigate
      print("Task created successfully: $response");
      clearTaskFields();
      // Notify listeners if task list needs to update
      notifyListeners();
    } catch (e) {
      // Handle errors, e.g., show a message
      print("Failed to create task: $e");
    }
  }

  // Update an existing task
  Future<void> updateTask(String taskId, BuildContext context) async {
    try {
      final updatedTask = Task(
        id: taskId,
        title: taskTitle.text,
        description: taskDescription.text,
        status: isTaskCompleted ? "completed" : "pending",
        startDate: DateTime.parse(taskStartDate.text),
        endDate: DateTime.parse(taskEndDate.text),
      );

      final response = await _taskService.updateTask(updatedTask);

      // Handle successful task update
      print("Task updated successfully: $response");
      clearTaskFields();
      notifyListeners();
    } catch (e) {
      print("Failed to update task: $e");
    }
  }

  // Delete a task
  Future<void> deleteTask(String taskId, BuildContext context) async {
    try {
      await _taskService.deleteTask(taskId);
      print("Task deleted successfully");
      notifyListeners();
    } catch (e) {
      print("Failed to delete task: $e");
    }
  }

  //get task list
  Future<void> getTaskList() async {
    try {
      final response = await _taskService.getTasks();
      print("Task list: $response");
    } catch (e) {
      print("Failed to get task list: $e");
    }
  }
  

  // Clear task input fields
  void clearTaskFields() {
    taskTitle.clear();
    taskDescription.clear();
    taskStartDate.clear();
    taskEndDate.clear();
    isTaskCompleted = false;
    notifyListeners();
  }

  // Toggle task completion status
  void toggleTaskCompletion() {
    isTaskCompleted = !isTaskCompleted;
    notifyListeners();
  }
}
